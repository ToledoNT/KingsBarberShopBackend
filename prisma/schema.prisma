generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Profissional {
  id                  String              @id @default(auto()) @map("_id") @db.ObjectId
  nome                String
  email               String
  telefone            String
  criadoEm            DateTime            @default(now())
  atualizadoEm        DateTime            @updatedAt
  procedimentos       Procedimento[]
  agendamentos        Agendamento[]
  horariosDisponiveis HorarioDisponivel[]
}

model Procedimento {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  nome            String
  valor           Float
  criadoEm        DateTime      @default(now())
  atualizadoEm    DateTime      @updatedAt
  profissionalId  String?       @db.ObjectId
  profissional    Profissional? @relation(fields: [profissionalId], references: [id])
  agendamentos    Agendamento[]
}

model HorarioDisponivel {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  profissionalId  String        @db.ObjectId
  profissional    Profissional  @relation(fields: [profissionalId], references: [id])
  data            DateTime
  inicio          String
  fim             String
  disponivel      Boolean       @default(false)
  criadoEm        DateTime      @default(now())
  atualizadoEm    DateTime      @updatedAt
}

model Agendamento {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  nome             String
  telefone         String
  email            String
  data             DateTime
  inicio           String?       // ✅ adiciona aqui
  fim              String?       // ✅ adiciona aqui
  servicoId        String        @db.ObjectId
  servico          Procedimento  @relation(fields: [servicoId], references: [id])
  profissionalId   String        @db.ObjectId
  profissional     Profissional  @relation(fields: [profissionalId], references: [id])
  status           String        @default("Agendado")
  servicoNome      String?
  servicoPreco     Float?
  profissionalNome String?
  criadoEm         DateTime      @default(now())
  atualizadoEm     DateTime      @updatedAt
}
model User {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String   @unique
  password     String
  role         Role     @default(BARBEIRO)
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt
}
enum Role {
  ADMIN
  BARBEIRO
}

model Financeiro {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  agendamentoId    String   @db.ObjectId
  clienteNome      String
  valor            Float
  status           String   @default("Pago") 
  criadoEm         DateTime @default(now())
  atualizadoEm     DateTime @updatedAt
}

model Relatorio {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  mesAno        DateTime 
  agendamentos  Int      @default(0)
  faturamento   Float    @default(0)
  cancelados    Int      @default(0)
  naoCompareceu Int      @default(0)

  criadoEm      DateTime @default(now())
  atualizadoEm  DateTime @updatedAt
}

model Log {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  value     String
  createdAt DateTime @default(now())
}