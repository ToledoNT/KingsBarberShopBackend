import express, { Request, Response } from "express";
import cors from "cors";
import cookieParser from "cookie-parser";

// ImportaÃ§Ã£o das rotas
import UserRoute from "./router/user-route";
import ProfissionalRoute from "./router/profissional-route";
import AgendamentoRoute from "./router/agendamentos-admin-route";
import ProcedimentoRoute from "./router/procedimentos-route";
import HorarioRoute from "./router/horario-router";
import FinanceRoute from "./router/financeiro-route";
import RelatorioRoute from "./router/dashboard-route";
import StatusRoute from "./router/status-route";

// Inicializando o servidor
const server = express();

// ðŸ”¹ Habilitar trust proxy para funcionamento correto atrÃ¡s do Nginx
server.set("trust proxy", 1);

// Usando JSON e cookieParser para manipulaÃ§Ã£o de dados
server.use(express.json());
server.use(cookieParser());

// =========================
// ConfiguraÃ§Ã£o CORS
// =========================
const allowedOrigins = [
  "https://www.kingsbarber.com.br",  // Frontend em produÃ§Ã£o
  "https://kingsbarber.com.br",      // Backend ou outro domÃ­nio em produÃ§Ã£o
  "http://localhost:3000",            // Localhost para desenvolvimento
];

// ConfiguraÃ§Ã£o do middleware CORS
server.use(
  cors({
    origin: (origin, callback) => {
      // Permite requisiÃ§Ãµes sem origem (ex: internas no prÃ³prio servidor)
      if (!origin || allowedOrigins.indexOf(origin) !== -1) {
        callback(null, true);  // Permite a requisiÃ§Ã£o
      } else {
        callback(new Error("NÃ£o autorizado pela polÃ­tica de CORS"));  // Bloqueia requisiÃ§Ãµes nÃ£o permitidas
      }
    },
    credentials: true,  // Permitir o envio de cookies nas requisiÃ§Ãµes
  })
);

// =========================
// ConfiguraÃ§Ã£o das Rotas
// =========================
server.use("/api", UserRoute);
server.use("/api", ProfissionalRoute);
server.use("/api", AgendamentoRoute);
server.use("/api", ProcedimentoRoute);
server.use("/api", HorarioRoute);
server.use("/api", FinanceRoute);
server.use("/api", RelatorioRoute);
server.use("/api", StatusRoute);

// Rota raiz de teste para verificar se o servidor estÃ¡ funcionando
server.get("/", (req: Request, res: Response) => {
  res.send("ðŸ”¥ Servidor rodando e rotas carregadas!");
});

// Exportando o servidor para ser utilizado em outros arquivos (ex: index.ts)
export default server;